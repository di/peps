PEP: 9999
Title: Python Package Index (Warehouse) JSON API v1
Author: Cooper Lees <me@cooperlees.com>, Nikita Chepanov <nikita@chepanov.com>, Sumana Harihareswara <sh@changeset.nyc>
Sponsor: ≈Åukasz Langa <lukasz@python.org>
BDFL-Delegate: Donald Stufft <donald at stufft.io>
Status: Draft
Type: Informational
Content-Type: text/x-rst
Created: 28-JUN-2020
Post-History: 10-JUN-2020
Discussions-To:


Abstract
========

The Python Package Index (Warehouse) provides a way of querying projects
metadata known as JSON API. This PEP formalizes the existing API as version 1.0.

Motivation
==========

The JSON API was never standardized, and 3rd-party index implementations had to
reverse engineer the format to implement it.

This PEP aims to lock in the existing standard as a guarantee for consumers
(e.g., client applications like pip, pipenv and more). It also aims to help
other indexes (such as devpi, pypiserver and Artifactory) to implement the
standard and be assured of interoperability. Standartization additionally allows
for a structured evolution of the API going forward.

Definitions
===========

* **JSON API**: Canonical / historical name given to this API described in this PEP
* **Release file**: Downloadable and installable distribution with Python source or binaries
* **Release**: In the context of JSON API, a Project Release is a set of Release Files associated with a specific version
* **Project**: A Python Project is a pip-installable
  Python package typically containing mutliple versions with
  potentially multiple installable artifacts

Goals
=====

* Declare legacy JSON API endpoints deprecated
* Formalize the structure of the existing JSON API without changing the output format:
  For all properties in the API specify whether they are required, optional,
  deprecated and detail their intended meaning
* Introduce new API endpoint that

  * Allows existing users to migrate with minimal effort
  * Is designed to evolve
  * Is designed to be friendly to index servers with multiple indexes

Non-goals
=========

The following is not part of this proposal, but is likely to warrant subsequent
PEPs:

* Adding properties that aren't already returned by the legacy JSON API endpoints
* Removing properties that are already returned by the legacy JSON API endpoints
* Adding discovery endpoints
* Adding pagination capabilities
* Adding authentication
* Adding writeable endpoints
* Supporting TUF (PEP 458): This version of the JSON API is not protected by TUF,
  and so should not be used for dependency resolution.
* Deprecating XMLRPC API: The PEP lays out the foundation for the future deprecation of the XMLRPC API.

Specification
=============

The JSON API is a HTTP GET based API.


Response Headers
----------------

HTTP responses must be sent with the following content type:

.. code-block::

   content-type: application/json

The response must also contain a ``X-PyPI-Last-Serial`` header with an integer
indicating the most recent serial ID number for the project. See Response
specification ``last_serial`` property below for more details:

.. code-block::

   x-pypi-last-serial: 10266075

Versioning
----------

The JSON API will use Semantic Versioning [3]_. This PEP defines version
**1.0.0**.


API URLs
--------

All URLs are described relative to a ``$root``. This is required to allow devpi
like servers to host multiple indexes. In case of PyPI the ``$root`` is
pypi.org.

* ``$root/api/v1/project/$project_name/latest``
* ``$root/api/v1/project/$project_name/$version``

Legacy endpoints migration
--------------------------

The legacy JSON API can be easily migrated without other code changes by
replacing the URL structure as described below:

* ``$root/pypi/$project_name/json`` ->
  ``$root/api/v1/project/$project_name/latest``
* ``$root/pypi/$project_name/$version/json`` ->
  ``$root/api/v1/project/$project_name/$version``

Response Specification
-----------------------

A ``json_api.schema.json`` JSON Schema file can be found `here
<pep-9999/json_api.schema.json>`_.

Some of the properties are marked as "[DEPRECATED]" which means they should be
present, but the contents of the properties should not be populated or relied on
by the users.

There are four main top level keys:

.. code-block::

   {
      "info": {...},
      "last_serial": {...},
      "releases": {...},
      "urls": {...}
   }

**info**

This key contains a JSON object with generic information about the requested
version of the project. Many of the properties are generated from
https://packaging.python.org/specifications/core-metadata/.

A minimal response containing only the required properties may look like this:

.. code-block::

   {
      author: "A. Random Developer",
      author_email: "author@example.com",
      license: "MIT",
      name: "sampleproject",
      project_url: "https://pypi.org/project/sampleproject/",
      version: "2.0.0",
      yanked: false,
      yanked_reason: null
   }

**last_serial**

The serial is a monotonically increasing integer sequence available for each
project that changes every time the project is updated.

**releases** and **urls**

The two properties have similar structure. However while ``releases`` include
all available release files across all released versions of the project, the
``urls`` property only provides information about the requested version of the
project. Consequently the content of the ``urls`` property is always available
as one of the versions in the ``releases`` property.

For example, if ``$root/api/v1/project/$project_name/1.0.0`` was requested, the
content of ``urls`` property in the example below will be identical to
``releases["1.0.0"]``.

.. code-block::

  "releases": {
    "0.1.0": [],
    "0.2.0": [{...}, {...}],
    "1.0.0": [{...}, {...}, ...]
  },
  "urls": [{...}, {...}, ...]

The list of released files can be empty for some versions of the project. Each
``{...}`` represents a release file.

**release file**

A downloadable and installable artifact, always associated with a particular
version of the project.

A minimal example containing only the required properties may look like this:

.. code-block::

   {
      filename: "sampleproject-2.0.0-py3-none-any.whl",
      url: "https://files.pythonhosted.org/packages/b8/f7/dd9223b39f683690c30f759c876df0944815e47b588cb517e4b9e652bcf7/sampleproject-2.0.0-py3-none-any.whl",
      digests: {
         md5: "34b3750e8a39e7c2930cac64cd44ca0a",
         sha256: "2b0c55537193b792098977fdb62f0acbaeb2c3cfc56d0e24ccab775201462e04"
      },
      packagetype: "bdist_wheel",
      size: 4209,
      upload_time: "2020-06-25T19:09:43",
      upload_time_iso_8601: "2020-06-25T19:09:43.103653Z",
      yanked: false,
      yanked_reason: null
   },

Dealing with errors
-------------------

Client errors are all handled via HTTP response codes. The following is
returned:

* 301: When a JSON URL has a trailing "/" the server should redirect to
  a URL removing the tailing "/" removed
* 404: When a projects does not exist
* 500: When an internal code logic or database error occurs


Capitalization, case-sensitivity, and normalization
---------------------------------------------------

The JSON API normalizes project names as per PEP 503 [2]_.

References
==========

.. [1] JSON Schema https://json-schema.org/
.. [2] PEP 503 https://www.python.org/dev/peps/pep-0503/
.. [3] Semantic Versioning https://semver.org/


Acknowledgments
===============

* GitHub issue requesting PEP - https://github.com/pypa/packaging-problems/issues/367
* devpi issue requesting JSON API Support - https://github.com/devpi/devpi/issues/801

Copyright
=========

This document has been placed in the public domain.

..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
